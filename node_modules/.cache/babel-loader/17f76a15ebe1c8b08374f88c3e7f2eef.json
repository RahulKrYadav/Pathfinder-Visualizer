{"ast":null,"code":"/**\n * (c) 2014, Andrey Geonya\n * https://github.com/dstructjs/disjoint-set\n */\n(function () {\n  'use strict';\n\n  function disjointSet() {\n    return new DisjointSet();\n  }\n\n  var DisjointSet = function DisjointSet() {\n    this._reset();\n  };\n\n  DisjointSet.prototype = {\n    add: function add(val) {\n      var id = this._isPrimitive(val) ? val : this._lastId;\n\n      if (typeof val._disjointSetId === 'undefined') {\n        val._disjointSetId = this._relations[id] = id;\n        this._objects[id] = val;\n        this._size[id] = 1;\n        this._lastId++;\n      }\n\n      return this;\n    },\n    find: function find(val) {\n      var id = this._isPrimitive(val) ? val : val._disjointSetId;\n      return this._findById(id);\n    },\n    _findById: function _findById(id) {\n      var rootId = id;\n\n      while (this._relations[rootId] !== rootId) {\n        rootId = this._relations[rootId];\n      }\n\n      return rootId;\n    },\n    connected: function connected(val1, val2) {\n      return this.find(val1) === this.find(val2) ? true : false;\n    },\n    union: function union(val1, val2) {\n      var val1RootId = this.find(val1),\n          val2RootId = this.find(val2);\n\n      if (val1RootId === val2RootId) {\n        return this;\n      }\n\n      if (this._size[val1RootId] < this._size[val2RootId]) {\n        this._relations[val1RootId] = val2RootId;\n        this._size[val1RootId] += this._size[val2RootId];\n      } else {\n        this._relations[val2RootId] = val1RootId;\n        this._size[val2RootId] += this._size[val1RootId];\n      }\n\n      return this;\n    },\n    extract: function extract() {\n      var rootId,\n          resObj = {},\n          resArr = [];\n\n      for (var id in this._relations) {\n        rootId = this._findById(id);\n\n        if (typeof resObj[rootId] === 'undefined') {\n          resObj[rootId] = [];\n        }\n\n        resObj[rootId].push(this._objects[id]);\n      }\n\n      for (var key1 in resObj) {\n        resArr.push(resObj[key1]);\n      }\n\n      return resArr;\n    },\n    destroy: function destroy() {\n      this._reset();\n    },\n    _isPrimitive: function _isPrimitive(val) {\n      if (typeof this.IS_PRIMITIVE !== 'undefined') {\n        return this.IS_PRIMITIVE;\n      } else {\n        this.IS_PRIMITIVE = DisjointSet._isPrimitive(val);\n        return this.IS_PRIMITIVE;\n      }\n    },\n    _reset: function _reset() {\n      for (var id in this._objects) {\n        delete this._objects[id]._disjointSetId;\n      }\n\n      this._objects = {};\n      this._relations = {};\n      this._size = {};\n      this._lastId = 0;\n    }\n  };\n\n  DisjointSet._isPrimitive = function (val) {\n    if (Object.prototype.toString.call(val) === '[object String]' || Object.prototype.toString.call(val) === '[object Number]') {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return disjointSet;\n    });\n  } else if (typeof module !== 'undefined') {\n    module.exports = disjointSet;\n  } else if (typeof self !== 'undefined') {\n    self.disjointSet = disjointSet;\n  } else {\n    window.disjointSet = disjointSet;\n  }\n})();","map":{"version":3,"names":["disjointSet","DisjointSet","_reset","prototype","add","val","id","_isPrimitive","_lastId","_disjointSetId","_relations","_objects","_size","find","_findById","rootId","connected","val1","val2","union","val1RootId","val2RootId","extract","resObj","resArr","push","key1","destroy","IS_PRIMITIVE","Object","toString","call","define","amd","module","exports","self","window"],"sources":["/Users/amitkumar/PATHfinding Visualizer/PATHFinding Visualizer/PathfindingVisualizer/node_modules/disjoint-set/src/DisjointSet.js"],"sourcesContent":["/**\n * (c) 2014, Andrey Geonya\n * https://github.com/dstructjs/disjoint-set\n */\n\n(function () { 'use strict';\n\nfunction disjointSet() {\n    return new DisjointSet();\n}\n\nvar DisjointSet = function() {\n    this._reset();\n};\n\nDisjointSet.prototype = {\n    add: function (val) {\n        var id = this._isPrimitive(val) ? val : this._lastId;\n        if (typeof val._disjointSetId === 'undefined') {\n            val._disjointSetId = this._relations[id] = id;\n            this._objects[id] = val;\n            this._size[id] = 1;\n            this._lastId++;\n        }\n        return this;\n    },\n\n    find: function (val) {\n        var id = this._isPrimitive(val) ? val : val._disjointSetId;\n        return this._findById(id);\n    },\n\n    _findById: function (id) {\n        var rootId = id;\n        while (this._relations[rootId] !== rootId) {\n            rootId = this._relations[rootId];\n        }\n        return rootId;\n    },\n\n    connected: function (val1, val2) {\n        return this.find(val1) === this.find(val2) ? true : false;\n    },\n\n    union: function (val1, val2) {\n        var val1RootId = this.find(val1),\n            val2RootId = this.find(val2);\n\n        if (val1RootId === val2RootId) { return this; }\n\n        if (this._size[val1RootId] < this._size[val2RootId]) {\n            this._relations[val1RootId] = val2RootId;\n            this._size[val1RootId] += this._size[val2RootId];\n        }\n        else {\n            this._relations[val2RootId] = val1RootId;\n            this._size[val2RootId] += this._size[val1RootId];\n        }\n\n        return this;\n    },\n\n    extract: function () {\n        var rootId,\n            resObj = {},\n            resArr = [];\n\n        for (var id in this._relations) {\n            rootId = this._findById(id);\n\n            if (typeof resObj[rootId] === 'undefined') {\n                resObj[rootId] = [];\n            }\n            resObj[rootId].push(this._objects[id]);\n        }\n\n        for (var key1 in resObj) {\n            resArr.push(resObj[key1]);\n        }\n\n        return resArr;\n    },\n\n    destroy: function () {\n        this._reset();\n    },\n\n    _isPrimitive: function (val) {\n        if (typeof this.IS_PRIMITIVE !== 'undefined') {\n            return this.IS_PRIMITIVE;\n        }\n        else {\n            this.IS_PRIMITIVE = DisjointSet._isPrimitive(val);\n            return this.IS_PRIMITIVE;\n        }\n    },\n\n    _reset: function () {\n        for (var id in this._objects) {\n            delete this._objects[id]._disjointSetId;\n        }\n        this._objects = {};\n        this._relations = {};\n        this._size = {};\n        this._lastId = 0;\n    }\n};\n\nDisjointSet._isPrimitive = function (val) {\n    if (Object.prototype.toString.call(val) === '[object String]' ||\n        Object.prototype.toString.call(val) === '[object Number]') {\n        return true;\n    }\n    else {\n        return false;\n    }\n};\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return disjointSet;\n    });\n} else if (typeof module !== 'undefined') {\n    module.exports = disjointSet;\n} else if (typeof self !== 'undefined') {\n    self.disjointSet = disjointSet;\n} else {\n    window.disjointSet = disjointSet;\n}\n\n})();"],"mappings":"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"},"metadata":{},"sourceType":"script"}