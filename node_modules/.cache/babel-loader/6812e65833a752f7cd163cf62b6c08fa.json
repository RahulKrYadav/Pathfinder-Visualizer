{"ast":null,"code":"import PriorityQueue from\"js-priority-queue\";var jumpPointSearch=function jumpPointSearch(grid,startNode,endNode){var visitedNodes=[];var shortestPath=[];var pq=new PriorityQueue({comparator:function comparator(a,b){return a.node.f-b.node.f;}});grid.forEach(function(row){row.forEach(function(node){//g : distance\nnode.g=Infinity;//f = g + h\nnode.f=Infinity;node.prevNode=null;});});grid[startNode.row][startNode.column].g=0;grid[startNode.row][startNode.column].f=H(startNode.row,startNode.column,endNode);//grid[startNode.row][startNode.column].isWall = false;\n//grid[endNode.row][endNode.column].isWall = false;\nvar n=[[1,0],[0,1],[-1,0],[0,-1],[-1,1],[1,1],[-1,-1],[1,-1]];n.forEach(function(d){pq.queue({node:grid[startNode.row][startNode.column],dir:d});//grid[startNode.row][startNode.column].prevNode[d[0]][d[1]] = null;\n});while(pq.length){var obj=pq.dequeue();if(!obj.node.isVisited){obj.node.isVisited=true;visitedNodes.push(obj.node);}/*console.log(\n      obj.node.row + \",\" + obj.node.col + \"-dir:\" + obj.dir + \"-f:\" + obj.node.f\n    );*/var response=scan(obj.node,obj.dir,grid,endNode,pq);if(response===\"found\"){break;}}shortestPath=getShortestPath(grid[endNode.row][endNode.column]);return{visitedNodes:visitedNodes,shortestPath:shortestPath};};//x = c // y = r\n//hor = y // ver = x\nvar scan=function scan(node,dir,grid,endNode,pq){var x=dir[0];var y=dir[1];if(x!==0&&y!==0){var r0=node.row;var c0=node.col;while(true){//console.log(\"diag\");\n//console.log(r0, c0);\nvar c1=c0+y;var r1=r0+x;if(!inGrid(r1,c1,grid))return false;var g=grid[r1][c1];var ng=grid[r0][c0].g+1;var nf=ng+H(r1,c1,endNode);if(g.f<=nf)return false;g.g=ng;g.f=nf;if(g.row===endNode.row&&g.col===endNode.column){grid[r1][c1].prevNode=grid[r0][c0];return\"found\";}if(g.isWall)return false;grid[r1][c1].prevNode=grid[r0][c0];var c2=c1+y;var r2=r1+x;var jump=false;if(inGrid(r1,c0,grid)&&grid[r1][c0].isWall&&inGrid(r2,c0,grid)&&(!grid[r2][c0].isWall||r2===endNode.row&&c0===endNode.column)){pq.queue({node:grid[r1][c1],dir:[x,-y]});jump=true;}if(inGrid(r0,c1,grid)&&grid[r0][c1].isWall&&inGrid(r0,c2,grid)&&(!grid[r0][c2].isWall||r0===endNode.row&&c2===endNode.column)){pq.queue({node:grid[r1][c1],dir:[-x,y]});jump=true;}var hor=scan(grid[r1][c1],[0,y],grid,endNode,pq);var ver=scan(grid[r1][c1],[x,0],grid,endNode,pq);if(hor===\"found\"||ver===\"found\")return\"found\";if(hor||ver){jump=true;}if(jump){pq.queue({node:grid[r1][c1],dir:[x,y]});return true;}c0=c1;r0=r1;}}else if(x===0){var _r=node.row;var _c=node.col;while(true){//console.log(\"row\");\n//console.log(r0, c0);\nvar _c2=_c+y;if(!inGrid(_r,_c2,grid))return false;var _g=grid[_r][_c2];var _ng=grid[_r][_c].g+1;var _nf=_ng+H(_r,_c2,endNode);if(_g.f<=_nf)return false;_g.g=_ng;_g.f=_nf;if(_g.row===endNode.row&&_g.col===endNode.column){grid[_r][_c2].prevNode=grid[_r][_c];return\"found\";}if(_g.isWall)return false;grid[_r][_c2].prevNode=grid[_r][_c];var _c3=_c2+y;var _jump=false;if(inGrid(_r-1,_c2,grid)&&grid[_r-1][_c2].isWall&&inGrid(_r-1,_c3,grid)&&(!grid[_r-1][_c3].isWall||_r-1===endNode.row&&_c3===endNode.column)){pq.queue({node:grid[_r][_c2],dir:[-1,y]});_jump=true;}if(inGrid(_r+1,_c2,grid)&&grid[_r+1][_c2].isWall&&inGrid(_r+1,_c3,grid)&&(!grid[_r+1][_c3].isWall||_r+1===endNode.row&&_c3===endNode.column)){pq.queue({node:grid[_r][_c2],dir:[1,y]});_jump=true;}if(_jump){pq.queue({node:grid[_r][_c2],dir:[0,y]});return true;}_c=_c2;}}else if(y===0){var _r2=node.row;var _c4=node.col;while(true){//console.log(\"col\");\n//console.log(r0, c0);\nvar _r3=_r2+x;if(!inGrid(_r3,_c4,grid))return false;var _g2=grid[_r3][_c4];var _ng2=grid[_r2][_c4].g+1;var _nf2=_ng2+H(_r3,_c4,endNode);if(_g2.f<=_nf2)return false;_g2.g=_ng2;_g2.f=_nf2;if(_g2.row===endNode.row&&_g2.col===endNode.column){grid[_r3][_c4].prevNode=grid[_r2][_c4];return\"found\";}if(_g2.isWall)return false;grid[_r3][_c4].prevNode=grid[_r2][_c4];var _r4=_r3+x;var _jump2=false;if(inGrid(_r3,_c4-1,grid)&&grid[_r3][_c4-1].isWall&&inGrid(_r4,_c4-1,grid)&&(!grid[_r4][_c4-1].isWall||_r4===endNode.row&&_c4-1===endNode.column)){pq.queue({node:grid[_r3][_c4],dir:[x,-1]});_jump2=true;}if(inGrid(_r3,_c4+1,grid)&&grid[_r3][_c4+1].isWall&&inGrid(_r4,_c4+1,grid)&&(!grid[_r4][_c4+1].isWall||_r4===endNode.row&&_c4+1===endNode.column)){pq.queue({node:grid[_r3][_c4],dir:[x,1]});_jump2=true;}if(_jump2){pq.queue({node:grid[_r3][_c4],dir:[x,y]});return true;}_r2=_r3;}}};var inGrid=function inGrid(row,col,grid){return grid[row]&&grid[row][col];};var H=function H(row,col,endNode){var dx=Math.abs(row-endNode.row);var dy=Math.abs(col-endNode.column);var d=1;var ans=d*Math.sqrt(dx*dx+dy*dy);/*if (heuristic === \"manhatten\") {\n      ans = d * (dx + dy);\n    }\n    if (heuristic === \"euclidean\") {\n      ans = d * Math.sqrt(dx * dx + dy * dy);\n    }\n    if (heuristic === \"octile\" || heuristic === \"chebyshev\") {\n      let d2 = diagDist;\n      ans = d * Math.max(dx, dy) + (d2 - d) * Math.min(dx, dy);\n    }*/return ans;};var getShortestPath=function getShortestPath(node){var shortestPath=[];while(node!==null){shortestPath.unshift(node);node=node.prevNode;if(node)node.isShortestPath=true;}return shortestPath;};export default jumpPointSearch;","map":{"version":3,"names":["PriorityQueue","jumpPointSearch","grid","startNode","endNode","visitedNodes","shortestPath","pq","comparator","a","b","node","f","forEach","row","g","Infinity","prevNode","column","H","n","d","queue","dir","length","obj","dequeue","isVisited","push","response","scan","getShortestPath","x","y","r0","c0","col","c1","r1","inGrid","ng","nf","isWall","c2","r2","jump","hor","ver","dx","Math","abs","dy","ans","sqrt","unshift","isShortestPath"],"sources":["/Users/amitkumar/Documents/RKY/PROJECTS/Project@PathfinderVisualizer/src/algorithms/jumpPointSearch.js"],"sourcesContent":["import PriorityQueue from \"js-priority-queue\";\n\nconst jumpPointSearch = (grid, startNode, endNode) => {\n  let visitedNodes = [];\n  let shortestPath = [];\n  let pq = new PriorityQueue({\n    comparator: function(a, b) {\n      return a.node.f - b.node.f;\n    }\n  });\n  grid.forEach(row => {\n    row.forEach(node => {\n      //g : distance\n      node.g = Infinity;\n      //f = g + h\n      node.f = Infinity;\n      node.prevNode = null;\n    });\n  });\n  grid[startNode.row][startNode.column].g = 0;\n  grid[startNode.row][startNode.column].f = H(\n    startNode.row,\n    startNode.column,\n    endNode\n  );\n  //grid[startNode.row][startNode.column].isWall = false;\n  //grid[endNode.row][endNode.column].isWall = false;\n  const n = [\n    [1, 0],\n    [0, 1],\n    [-1, 0],\n    [0, -1],\n    [-1, 1],\n    [1, 1],\n    [-1, -1],\n    [1, -1]\n  ];\n\n  n.forEach(d => {\n    pq.queue({ node: grid[startNode.row][startNode.column], dir: d });\n    //grid[startNode.row][startNode.column].prevNode[d[0]][d[1]] = null;\n  });\n  while (pq.length) {\n    const obj = pq.dequeue();\n    if (!obj.node.isVisited) {\n      obj.node.isVisited = true;\n      visitedNodes.push(obj.node);\n    }\n    /*console.log(\n      obj.node.row + \",\" + obj.node.col + \"-dir:\" + obj.dir + \"-f:\" + obj.node.f\n    );*/\n    const response = scan(obj.node, obj.dir, grid, endNode, pq);\n    if (response === \"found\") {\n      break;\n    }\n  }\n  shortestPath = getShortestPath(grid[endNode.row][endNode.column]);\n  return { visitedNodes, shortestPath };\n};\n//x = c // y = r\n//hor = y // ver = x\nconst scan = (node, dir, grid, endNode, pq) => {\n  const x = dir[0];\n  const y = dir[1];\n  if (x !== 0 && y !== 0) {\n    let r0 = node.row;\n    let c0 = node.col;\n    while (true) {\n      //console.log(\"diag\");\n      //console.log(r0, c0);\n      let c1 = c0 + y;\n      let r1 = r0 + x;\n      if (!inGrid(r1, c1, grid)) return false;\n      let g = grid[r1][c1];\n      let ng = grid[r0][c0].g + 1;\n      let nf = ng + H(r1, c1, endNode);\n      if (g.f <= nf) return false;\n      g.g = ng;\n      g.f = nf;\n      if (g.row === endNode.row && g.col === endNode.column) {\n        grid[r1][c1].prevNode = grid[r0][c0];\n        return \"found\";\n      }\n      if (g.isWall) return false;\n      grid[r1][c1].prevNode = grid[r0][c0];\n      let c2 = c1 + y;\n      let r2 = r1 + x;\n      let jump = false;\n      if (\n        inGrid(r1, c0, grid) &&\n        grid[r1][c0].isWall &&\n        inGrid(r2, c0, grid) &&\n        (!grid[r2][c0].isWall || (r2 === endNode.row && c0 === endNode.column))\n      ) {\n        pq.queue({ node: grid[r1][c1], dir: [x, -y] });\n        jump = true;\n      }\n      if (\n        inGrid(r0, c1, grid) &&\n        grid[r0][c1].isWall &&\n        inGrid(r0, c2, grid) &&\n        (!grid[r0][c2].isWall || (r0 === endNode.row && c2 === endNode.column))\n      ) {\n        pq.queue({ node: grid[r1][c1], dir: [-x, y] });\n        jump = true;\n      }\n      let hor = scan(grid[r1][c1], [0, y], grid, endNode, pq);\n      let ver = scan(grid[r1][c1], [x, 0], grid, endNode, pq);\n      if (hor === \"found\" || ver === \"found\") return \"found\";\n      if (hor || ver) {\n        jump = true;\n      }\n      if (jump) {\n        pq.queue({ node: grid[r1][c1], dir: [x, y] });\n        return true;\n      }\n      c0 = c1;\n      r0 = r1;\n    }\n  } else if (x === 0) {\n    let r0 = node.row;\n    let c0 = node.col;\n    while (true) {\n      //console.log(\"row\");\n      //console.log(r0, c0);\n      let c1 = c0 + y;\n      if (!inGrid(r0, c1, grid)) return false;\n      let g = grid[r0][c1];\n      let ng = grid[r0][c0].g + 1;\n      let nf = ng + H(r0, c1, endNode);\n      if (g.f <= nf) return false;\n      g.g = ng;\n      g.f = nf;\n      if (g.row === endNode.row && g.col === endNode.column) {\n        grid[r0][c1].prevNode = grid[r0][c0];\n        return \"found\";\n      }\n      if (g.isWall) return false;\n      grid[r0][c1].prevNode = grid[r0][c0];\n      let c2 = c1 + y;\n      let jump = false;\n      if (\n        inGrid(r0 - 1, c1, grid) &&\n        grid[r0 - 1][c1].isWall &&\n        inGrid(r0 - 1, c2, grid) &&\n        (!grid[r0 - 1][c2].isWall ||\n          (r0 - 1 === endNode.row && c2 === endNode.column))\n      ) {\n        pq.queue({ node: grid[r0][c1], dir: [-1, y] });\n        jump = true;\n      }\n      if (\n        inGrid(r0 + 1, c1, grid) &&\n        grid[r0 + 1][c1].isWall &&\n        inGrid(r0 + 1, c2, grid) &&\n        (!grid[r0 + 1][c2].isWall ||\n          (r0 + 1 === endNode.row && c2 === endNode.column))\n      ) {\n        pq.queue({ node: grid[r0][c1], dir: [1, y] });\n        jump = true;\n      }\n      if (jump) {\n        pq.queue({ node: grid[r0][c1], dir: [0, y] });\n        return true;\n      }\n      c0 = c1;\n    }\n  } else if (y === 0) {\n    let r0 = node.row;\n    let c0 = node.col;\n    while (true) {\n      //console.log(\"col\");\n      //console.log(r0, c0);\n      let r1 = r0 + x;\n      if (!inGrid(r1, c0, grid)) return false;\n      let g = grid[r1][c0];\n      let ng = grid[r0][c0].g + 1;\n      let nf = ng + H(r1, c0, endNode);\n      if (g.f <= nf) return false;\n      g.g = ng;\n      g.f = nf;\n      if (g.row === endNode.row && g.col === endNode.column) {\n        grid[r1][c0].prevNode = grid[r0][c0];\n        return \"found\";\n      }\n      if (g.isWall) return false;\n      grid[r1][c0].prevNode = grid[r0][c0];\n      let r2 = r1 + x;\n      let jump = false;\n      if (\n        inGrid(r1, c0 - 1, grid) &&\n        grid[r1][c0 - 1].isWall &&\n        inGrid(r2, c0 - 1, grid) &&\n        (!grid[r2][c0 - 1].isWall ||\n          (r2 === endNode.row && c0 - 1 === endNode.column))\n      ) {\n        pq.queue({ node: grid[r1][c0], dir: [x, -1] });\n        jump = true;\n      }\n      if (\n        inGrid(r1, c0 + 1, grid) &&\n        grid[r1][c0 + 1].isWall &&\n        inGrid(r2, c0 + 1, grid) &&\n        (!grid[r2][c0 + 1].isWall ||\n          (r2 === endNode.row && c0 + 1 === endNode.column))\n      ) {\n        pq.queue({ node: grid[r1][c0], dir: [x, 1] });\n        jump = true;\n      }\n      if (jump) {\n        pq.queue({ node: grid[r1][c0], dir: [x, y] });\n        return true;\n      }\n      r0 = r1;\n    }\n  }\n};\n\nconst inGrid = (row, col, grid) => {\n  return grid[row] && grid[row][col];\n};\n\nconst H = (row, col, endNode) => {\n  const dx = Math.abs(row - endNode.row);\n  const dy = Math.abs(col - endNode.column);\n  const d = 1;\n  let ans = d * Math.sqrt(dx * dx + dy * dy);\n  /*if (heuristic === \"manhatten\") {\n      ans = d * (dx + dy);\n    }\n    if (heuristic === \"euclidean\") {\n      ans = d * Math.sqrt(dx * dx + dy * dy);\n    }\n    if (heuristic === \"octile\" || heuristic === \"chebyshev\") {\n      let d2 = diagDist;\n      ans = d * Math.max(dx, dy) + (d2 - d) * Math.min(dx, dy);\n    }*/\n  return ans;\n};\n\nconst getShortestPath = node => {\n  let shortestPath = [];\n  while (node !== null) {\n    shortestPath.unshift(node);\n    node = node.prevNode;\n    if (node) node.isShortestPath = true;\n  }\n  return shortestPath;\n};\n\nexport default jumpPointSearch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}