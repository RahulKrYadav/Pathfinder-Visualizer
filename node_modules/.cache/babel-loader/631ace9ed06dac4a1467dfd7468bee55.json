{"ast":null,"code":"import disjointSet from\"disjoint-set\";var kruskal=function kruskal(grid,rows,columns){var set=disjointSet();var addedWalls=[];var removedWalls=[];var edges=[];for(var i=0;i<rows;i++){for(var j=0;j<columns;j++){if(i%2===0||j%2===0){if(i!==0&&j!==0&&i!==rows-1&&j!==columns-1){edges.push(grid[i][j]);}}else set.add(grid[i][j]);grid[i][j].isWall=true;addedWalls.push(grid[i][j]);}}shuffle(edges);edges.forEach(function(edge){if(edge.row%2!==0&&!set.connected(grid[edge.row][edge.col-1],grid[edge.row][edge.col+1])){set.union(grid[edge.row][edge.col-1],grid[edge.row][edge.col+1]);grid[edge.row][edge.col].isWall=false;grid[edge.row][edge.col-1].isWall=false;grid[edge.row][edge.col+1].isWall=false;removedWalls.push(grid[edge.row][edge.col-1]);removedWalls.push(grid[edge.row][edge.col]);removedWalls.push(grid[edge.row][edge.col+1]);}if(edge.col%2!==0&&!set.connected(grid[edge.row-1][edge.col],grid[edge.row+1][edge.col])){set.union(grid[edge.row-1][edge.col],grid[edge.row+1][edge.col]);grid[edge.row][edge.col].isWall=false;grid[edge.row-1][edge.col].isWall=false;grid[edge.row+1][edge.col].isWall=false;removedWalls.push(grid[edge.row-1][edge.col]);removedWalls.push(grid[edge.row][edge.col]);removedWalls.push(grid[edge.row+1][edge.col]);}});return{addedWalls:addedWalls,removedWalls:removedWalls,animAddedWalls:false};};var shuffle=function shuffle(array){for(var i=array.length-1;i>0;i--){var j=Math.floor(Math.random()*(i+1));var _ref=[array[j],array[i]];array[i]=_ref[0];array[j]=_ref[1];}};export default kruskal;","map":{"version":3,"names":["disjointSet","kruskal","grid","rows","columns","set","addedWalls","removedWalls","edges","i","j","push","add","isWall","shuffle","forEach","edge","row","connected","col","union","animAddedWalls","array","length","Math","floor","random"],"sources":["/Users/amitkumar/Documents/RKY/PROJECTS/PATHFIND-1/src/mazeGen/kruskall.js"],"sourcesContent":["import disjointSet from \"disjoint-set\";\n\nconst kruskal = (grid, rows, columns) => {\n  const set = disjointSet();\n  let addedWalls = [];\n  let removedWalls = [];\n  let edges = [];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      if (i % 2 === 0 || j % 2 === 0) {\n        if (i !== 0 && j !== 0 && i !== rows - 1 && j !== columns - 1) {\n          edges.push(grid[i][j]);\n        }\n      } else set.add(grid[i][j]);\n      grid[i][j].isWall = true;\n      addedWalls.push(grid[i][j]);\n    }\n  }\n  shuffle(edges);\n  edges.forEach(edge => {\n    if (\n      edge.row % 2 !== 0 &&\n      !set.connected(grid[edge.row][edge.col - 1], grid[edge.row][edge.col + 1])\n    ) {\n      set.union(grid[edge.row][edge.col - 1], grid[edge.row][edge.col + 1]);\n      grid[edge.row][edge.col].isWall = false;\n      grid[edge.row][edge.col - 1].isWall = false;\n      grid[edge.row][edge.col + 1].isWall = false;\n      removedWalls.push(grid[edge.row][edge.col - 1]);\n      removedWalls.push(grid[edge.row][edge.col]);\n      removedWalls.push(grid[edge.row][edge.col + 1]);\n    }\n    if (\n      edge.col % 2 !== 0 &&\n      !set.connected(grid[edge.row - 1][edge.col], grid[edge.row + 1][edge.col])\n    ) {\n      set.union(grid[edge.row - 1][edge.col], grid[edge.row + 1][edge.col]);\n      grid[edge.row][edge.col].isWall = false;\n      grid[edge.row - 1][edge.col].isWall = false;\n      grid[edge.row + 1][edge.col].isWall = false;\n      removedWalls.push(grid[edge.row - 1][edge.col]);\n      removedWalls.push(grid[edge.row][edge.col]);\n      removedWalls.push(grid[edge.row + 1][edge.col]);\n    }\n  });\n  return { addedWalls, removedWalls, animAddedWalls: false };\n};\n\nconst shuffle = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};\n\nexport default kruskal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}