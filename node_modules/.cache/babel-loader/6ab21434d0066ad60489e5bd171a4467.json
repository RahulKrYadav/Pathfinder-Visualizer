{"ast":null,"code":"import PriorityQueue from\"js-priority-queue\";var astar=function astar(grid,startNode,endNode,heuristic,allowDiag){var visitedNodes=[];var shortestPath=[];var diagDist=1.414;if(heuristic===\"chebyshev\")diagDist=1;var pq=new PriorityQueue({comparator:function comparator(a,b){//Tie-breaker\nif(a.f===b.f)return a.h-b.h;return a.f-b.f;}});grid.forEach(function(row){row.forEach(function(node){//g : distance\nnode.g=Infinity;//h : heuristic\nnode.h=Infinity;//f = g + h\nnode.f=Infinity;node.prevNode=null;});});grid[startNode.row][startNode.column].g=0;grid[startNode.row][startNode.column].h=0;grid[startNode.row][startNode.column].f=0;pq.queue(grid[startNode.row][startNode.column]);while(pq.length){var node=pq.dequeue();var row=node.row,col=node.col;grid[row][col].isVisited=true;visitedNodes.push(node);if(node.row===endNode.row&&node.col===endNode.column){shortestPath=getShortestPath(node);break;}var n=[[1,0],[0,1],[-1,0],[0,-1]];//with diag\nif(allowDiag)n.push([-1,1],[1,1],[-1,-1],[1,-1]);for(var j=0;j<n.length;j++){var i=n[j];var r=row+i[0];var c=col+i[1];if(grid[r]&&grid[r][c]&&!grid[r][c].isVisited&&(!grid[r][c].isWall||r===endNode.row&&c===endNode.column)){if(r===endNode.row&&c===endNode.column){grid[r][c].isVisited=true;grid[r][c].prevNode=grid[row][col];shortestPath=getShortestPath(grid[r][c]);return{visitedNodes:visitedNodes,shortestPath:shortestPath};}var dist=Math.abs(i[0])===1&&Math.abs(i[1])===1?diagDist:1;var gNew=grid[row][col].g+dist;var hNew=calculateHeuristic(r,c,endNode,heuristic,diagDist);var fNew=gNew+hNew;if(grid[r][c].f>fNew){grid[r][c].g=gNew;grid[r][c].h=hNew;grid[r][c].f=fNew;grid[r][c].prevNode=node;pq.queue(grid[r][c]);}}}}return{visitedNodes:visitedNodes,shortestPath:shortestPath};};var calculateHeuristic=function calculateHeuristic(row,col,endNode,heuristic,diagDist){var dx=Math.abs(row-endNode.row);var dy=Math.abs(col-endNode.column);var d=1;var ans;if(heuristic===\"manhatten\"){ans=d*(dx+dy);}if(heuristic===\"euclidean\"){ans=d*Math.sqrt(dx*dx+dy*dy);}if(heuristic===\"octile\"||heuristic===\"chebyshev\"){var d2=diagDist;ans=d*Math.max(dx,dy)+(d2-d)*Math.min(dx,dy);}return ans;};var getShortestPath=function getShortestPath(node){var shortestPath=[];while(node!==null){shortestPath.unshift(node);node=node.prevNode;if(node)node.isShortestPath=true;}return shortestPath;};export default astar;","map":{"version":3,"names":["PriorityQueue","astar","grid","startNode","endNode","heuristic","allowDiag","visitedNodes","shortestPath","diagDist","pq","comparator","a","b","f","h","forEach","row","node","g","Infinity","prevNode","column","queue","length","dequeue","col","isVisited","push","getShortestPath","n","j","i","r","c","isWall","dist","Math","abs","gNew","hNew","calculateHeuristic","fNew","dx","dy","d","ans","sqrt","d2","max","min","unshift","isShortestPath"],"sources":["/Users/amitkumar/PATHfinding Visualizer/PATHFinding Visualizer/PathfindingVisualizer/src/algorithms/astar.js"],"sourcesContent":["import PriorityQueue from \"js-priority-queue\";\n\nconst astar = (grid, startNode, endNode, heuristic, allowDiag) => {\n  let visitedNodes = [];\n  let shortestPath = [];\n  let diagDist = 1.414;\n  if (heuristic === \"chebyshev\") diagDist = 1;\n  let pq = new PriorityQueue({\n    comparator: function(a, b) {\n      //Tie-breaker\n      if (a.f === b.f) return a.h - b.h;\n      return a.f - b.f;\n    }\n  });\n  grid.forEach(row => {\n    row.forEach(node => {\n      //g : distance\n      node.g = Infinity;\n      //h : heuristic\n      node.h = Infinity;\n      //f = g + h\n      node.f = Infinity;\n      node.prevNode = null;\n    });\n  });\n  grid[startNode.row][startNode.column].g = 0;\n  grid[startNode.row][startNode.column].h = 0;\n  grid[startNode.row][startNode.column].f = 0;\n  pq.queue(grid[startNode.row][startNode.column]);\n  while (pq.length) {\n    const node = pq.dequeue();\n    const { row, col } = node;\n    grid[row][col].isVisited = true;\n    visitedNodes.push(node);\n    if (node.row === endNode.row && node.col === endNode.column) {\n      shortestPath = getShortestPath(node);\n      break;\n    }\n    const n = [\n      [1, 0],\n      [0, 1],\n      [-1, 0],\n      [0, -1]\n    ];\n    //with diag\n    if (allowDiag) n.push([-1, 1], [1, 1], [-1, -1], [1, -1]);\n    for (let j = 0; j < n.length; j++) {\n      const i = n[j];\n      const r = row + i[0];\n      const c = col + i[1];\n      if (\n        grid[r] &&\n        grid[r][c] &&\n        !grid[r][c].isVisited &&\n        (!grid[r][c].isWall || (r === endNode.row && c === endNode.column))\n      ) {\n        if (r === endNode.row && c === endNode.column) {\n          grid[r][c].isVisited = true;\n          grid[r][c].prevNode = grid[row][col];\n          shortestPath = getShortestPath(grid[r][c]);\n          return { visitedNodes, shortestPath };\n        }\n        const dist =\n          Math.abs(i[0]) === 1 && Math.abs(i[1]) === 1 ? diagDist : 1;\n        let gNew = grid[row][col].g + dist;\n        let hNew = calculateHeuristic(r, c, endNode, heuristic, diagDist);\n        let fNew = gNew + hNew;\n        if (grid[r][c].f > fNew) {\n          grid[r][c].g = gNew;\n          grid[r][c].h = hNew;\n          grid[r][c].f = fNew;\n          grid[r][c].prevNode = node;\n          pq.queue(grid[r][c]);\n        }\n      }\n    }\n  }\n  return { visitedNodes, shortestPath };\n};\n\nconst calculateHeuristic = (row, col, endNode, heuristic, diagDist) => {\n  const dx = Math.abs(row - endNode.row);\n  const dy = Math.abs(col - endNode.column);\n  const d = 1;\n  let ans;\n  if (heuristic === \"manhatten\") {\n    ans = d * (dx + dy);\n  }\n  if (heuristic === \"euclidean\") {\n    ans = d * Math.sqrt(dx * dx + dy * dy);\n  }\n  if (heuristic === \"octile\" || heuristic === \"chebyshev\") {\n    let d2 = diagDist;\n    ans = d * Math.max(dx, dy) + (d2 - d) * Math.min(dx, dy);\n  }\n  return ans;\n};\n\nconst getShortestPath = node => {\n  let shortestPath = [];\n  while (node !== null) {\n    shortestPath.unshift(node);\n    node = node.prevNode;\n    if (node) node.isShortestPath = true;\n  }\n  return shortestPath;\n};\n\nexport default astar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}